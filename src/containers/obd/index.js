/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { Component } from 'react';
import { Platform, StyleSheet,FlatList, View ,ScrollView,DeviceEventEmitter, TouchableOpacity} from 'react-native';
import JetBridge_OBDII from '@sohoby/sohoby-react-native-obdii';
import {AppHeader} from "../../components/AppHeader";
import Theme from "../../App.style";
import PageContainer from "../../components/PageContainer";
import CardSelection from "../dashboard/cardSelection";
import style from "../test/style";
import Card from "../../components/Card";
import Icon from "../../components/Icons";
import Text from '../../components/Text';
import Button from "../../components/Button";
import Message from '../../components/Message';



export default class OBD extends Component {

    constructor() {
        super();

        this.state = {
            direction: '-',
            speed: '0km/h',
            rpm: '0RPM',
            engineRunTime: '00:00:00',
            isStartLiveData: false,
            gpsState: '-',
            btStatus : "Connect",
            btDeviceList: [],
            btSelectedDeviceAddress: "",
            obdStatus: 'disconnected',
            debug : '-',
            isMockUpMode:false,
            obd2Data : { } ,
            status: 'starting',
            message: '--',
            selectedBTDeviceIndex: 0,
            btDeviceListForUI: [],
            selectedId:null,
            connected:false,
            connectedLabel: "Connect",
            deviceSelected:false,
            disabled:true
        };
    }

    componentDidMount() {
        let pairedList = [];
        let selected = 0;


        JetBridge_OBDII.getBluetoothDeviceNameList()
            .then((nameList) => {
                console.log('Bluetooth device list : ' + JSON.stringify(nameList));
                this.setState({btDeviceList : nameList});
                let deviceForUI = nameList.map((item, index) => {
                    if (item.address === this.props.btSelectedDeviceAddress) {
                        this.setState({selectedBTDeviceIndex : index});
                    }
                    return item.name + '\n' + item.address;
                });
                this.setState({btDeviceListForUI : nameList});
            })
            .catch((e) => {
                console.log('Get device name error : ' + e)

            });


        this.btStatusListener = DeviceEventEmitter.addListener('obd2BluetoothStatus', this.btStatus.bind(this));
        this.obdStatusListener = DeviceEventEmitter.addListener('obd2Status', this.obdStatus.bind(this));
        this.obdLiveDataListener = DeviceEventEmitter.addListener('obd2LiveData', this.obdLiveData.bind(this));

        this.setDeviceAddressListener = DeviceEventEmitter.addListener('OBDReader.setDeviceAddress', this.setDeviceAddress.bind(this));


    }


    menu = () => {
        this.props.navigation.openDrawer();
    };

    btStatus(data) {
        this.setState({btStatus : data.status});
    }

    obdStatus(data) {
        this.setState({obdStatus : data.status});
    }

    obdLiveData(data) {

        let copyData = JSON.parse(JSON.stringify(this.state.obd2Data));
        copyData[data.cmdID] = data;
        console.log(JSON.stringify(copyData));
        this.setState({
            obd2Data : copyData,
        });

        if (data.cmdID === 'ENGINE_RPM') {
            this.setState({
                rpm : data.cmdResult,
            });
        }

        if (data.cmdID === 'SPEED') {
            this.setState({
                speed: data.cmdResult,
            });
        }
    }

    sensorOrientation(data) {
    this.setState({debug: 'Orientation data = ' + JSON.stringify(data)});
        if (data.azimuth >= 337.5 || data.azimuth < 22.5) {
            if (this.state.direction !== 'N') {
                this.setState({direction: 'N'});
            }
        } else if (data.azimuth >= 22.5 && data.azimuth < 67.5) {
            if (this.state.direction !== 'NE') {
                this.setState({direction: 'NE'});
            }
        } else if (data.azimuth >= 67.5 && data.azimuth < 112.5) {
            if (this.state.direction !== 'E') {
                this.setState({direction: 'E'});
            }
        } else if (data.azimuth >= 112.5 && data.azimuth < 157.5) {
            if (this.state.direction !== 'SE') {
                this.setState({direction: 'SE'});
            }
        } else if (data.azimuth >= 157.5 && data.azimuth < 202.5) {
            if (this.state.direction !== 'S') {
                this.setState({direction: 'S'});
            }
        } else if (data.azimuth >= 202.5 && data.azimuth < 247.5) {
            if (this.state.direction !== 'SW') {
                this.setState({direction: 'SW'});
            }
        } else if (data.azimuth >= 247.5 && data.azimuth < 292.5) {
            if (this.state.direction !== 'W') {
                this.setState({direction: 'W'});
            }
        } else if (data.azimuth >= 292.5 && data.azimuth < 337.5) {
            if (this.state.direction !== 'NW') {
                this.setState({direction: 'NW'});
            }
        }
    }


    componentWillUnmount() {
        this.stopLiveData();
        this.btStatusListener.remove();
        this.obdStatusListener.remove();
        this.obdLiveDataListener.remove();
        this.setDeviceAddressListener.remove();
    }

    onReady() {
        JetBridge_OBDII.ready();
    }

    startLiveData() {


        if (this.state.btSelectedDeviceAddress === "") {
          Message.alert(
            'Bluetooth Device',
            'You have to enable Bluetooth and select bluetooth device ',
            [
              {text: 'OK', onPress: () => {}, type: 'yes'},
            ]
          )
          return;
        }

        this.setState({
            isStartLiveData: true,
            connectedLabel:"Connected",
            connected:true,
            disabled:false
        });

        //SensorManager.startOrientation(1000);
        //this.listenerOrientation = DeviceEventEmitter.addListener('Orientation', this.sensorOrientation);
        JetBridge_OBDII.setMockUpMode(this.state.isMockUpMode);

        JetBridge_OBDII.startLiveData(this.state.btSelectedDeviceAddress);
        this.onReady();

        //  });
    }

    stopLiveData() {
        this.setState({
            isStartLiveData: false,
            direction: '-',
            bluetoothStatus: '-',
        });
       // SensorManager.stopOrientation();
        this.obdLiveDataListener && this.obdLiveDataListener.remove();
        this.listenerOrientation && this.listenerOrientation.remove();
        JetBridge_OBDII.stopLiveData();
    }

    getDTC() {
    }

    getTrips() {
    }

    setDeviceAddress(aDeviceAddress) {
        console.log('setDeviceAddress : ' + aDeviceAddress);
        this.setState({btSelectedDeviceAddress : aDeviceAddress});
    }

    runMenu(value) {
        switch(value) {
            case 1 :
                this.startLiveData();
                break;
            case 2 :
                this.stopLiveData();
                break;
            case 3 :
                this.openSettings();
                break;
            default :
                break;
        }
    }

    render() {
        let startLiveColor = this.state.isStartLiveData ? 'Grey' : 'Black';
        let stopLiveColor = this.state.isStartLiveData ? 'Black' : 'Grey';

        let originData = this.state.obd2Data;
        let cmdKeys = Object.keys(this.state.obd2Data);
        let cmdData = cmdKeys.map(function(key) { return originData[key]; });

        console.log("///command data", cmdData);

        return (
            <View style={{flex: 1}}>
                <Message />
                <AppHeader headerLogo={false}
                           rightIcon={[
                               {icon: 'Profile', action: this.menu, fill: Theme.primary_color_2, bg: Theme.base_color_10},
                               {icon: 'Search', action: this.menu, fill: Theme.primary_color_2, bg: Theme.base_color_10},
                               {icon: 'plug', action: this.menu, fill: Theme.primary_color_2, bg: Theme.base_color_10}
                               ]}
                           leftIcon={{icon: 'menu', action: this.menu, fill: Theme.primary_color_2, bg: Theme.base_color_10}}
                />
                <PageContainer style={{flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between', paddingLeft: 30, paddingRight: 30, paddingTop: 30}}>
                        <View style={styles.titleHeader}>
                            {/*<Icon name={"btOff"} width={20} height={20} fill={Theme.base_color_7}/>*/}
                            <Text weight={'bold'} size={6} color={Theme.primary_color_2} underline={true}>Paired Bluetooth Devices</Text>
                            <Text weight={'regular'} size={2} color={Theme.base_color_2} underline={false} style={{marginTop:10}}>
                                Please tap on a device from the list below to select it. Tap the "Connect" button once selected.
                            </Text>
                        </View>

                        <View style={styles.deviceListView}>
                            <View style={{width:'100%', backgroundColor: this.state.deviceSelected ? 'rgba(0,195,137,0.1)' :'white'}}>
                                {
                                    this.state.btDeviceListForUI.map((item, index) => (
                                        <TouchableOpacity  key={index} onPress={()=>this.setState({deviceSelected:true,disabled:false,selectedBTDeviceIndex:index,btSelectedDeviceAddress:item.address})}>
                                            <View
                                                style={{flexDirection:'row', alignItems: 'center',
                                                    borderBottomColor:Theme.base_color_8,height:100,
                                                    borderBottomWidth:1, width:'100%', padding:10, justifyContent:'space-between'}} key={index}>

                                                <Icon name={"btOff"} width={10} height={10} fill={Theme.base_color_7}/>
                                                <Text weight={'regular'} size={4} color={this.state.deviceSelected?Theme.base_color_1:Theme.base_color_6} underline={false} >{item.name}{item.address}</Text>

                                                <View style={{flexDirection:'row', justifyContent:'flex-end'}}>
                                                    <Button label={this.state.btStatus}  type={"secondary"} action={()=>this.runMenu(1)} style={{
                                                        width: 130,
                                                        backgroundColor:this.state.connected? Theme.secondary_color_3 : this.state.deviceSelected ? Theme.primary_color_1: 'transparent',
                                                        marginLeft:10
                                                    }} />
                                                    <Button label={this.state.isMockUpMode?'Test Mode':'Live Mode'} type={"secondary"} action={()=>this.setState({isMockUpMode:!this.state.isMockUpMode})} style={{
                                                        width: 130,
                                                        backgroundColor:Theme.primary_color_2,
                                                        marginLeft:10
                                                    }} />
                                                    {

                                                        this.state.connected &&
                                                        <View style={{flexDirection:'row', justifyContent:'flex-end'}}>
                                                            <Button label={"Stop"} type={"secondary"} action={()=>this.runMenu(2)} style={{
                                                                width: 130,
                                                                backgroundColor:Theme.secondary_color_2,
                                                                marginLeft:10
                                                            }} />

                                                        </View>
                                                    }
                                                </View>


                                            </View>
                                        </TouchableOpacity>
                                    ))
                                }
                            </View>

                        </View>



                             {/*<View style={{flex: .1, flexDirection:'row', justifyContent: 'space-around'}}>*/}

                             {/*    <TouchableOpacity style={styles.btn} onPress={()=>this.runMenu(2)}>*/}
                             {/*        <Text style={{fontSize:15,color:'white', textAlign: 'center'}}>Stop</Text>*/}
                             {/*    </TouchableOpacity>*/}

                             {/*    <TouchableOpacity style={styles.btn} onPress={()=>this.setState({isMockUpMode:!this.state.isMockUpMode})}>*/}
                             {/*        <Text style={{fontSize:15,color:'white', textAlign: 'center'}}>{this.state.isMockUpMode?'Test Mode':'Live Mode'}</Text>*/}
                             {/*    </TouchableOpacity>*/}

                             {/*</View>*/}
                          {/*<Text style={{fontSize:15,  textAlign: 'center'}}>{this.state.btSelectedDeviceAddress}</Text>*/}

                    {
                        this.state.connected &&
                        <Card style={styles.cardContainer}>
                            <ScrollView>
                                {
                                    cmdData.map((item, index) => (

                                        <View
                                            style={{flexDirection:'row',height:50, alignItems: 'center', borderBottomWidth:1,borderBottomColor:Theme.base_color_8, paddingLeft: 10, paddingRight: 30}}
                                            key={index}
                                        >
                                            <Text weight={'regular'} size={1} color={Theme.base_color_6} underline={false} style={{padding:5}}>{item.cmdName}</Text>
                                            <Text weight={'regular'} size={2} color={Theme.base_color_1} underline={false} style={{padding:5}}>{item.cmdResult}</Text>

                                        </View>
                                    ))
                                }
                            </ScrollView>
                        </Card>
                    }

                </PageContainer>
            </View>
            // <View style={styles.bodyContainer}>
            //     <View style={{flex: .1, flexDirection:'row'}}>
            //         <Text style={{fontSize:30}}>{this.state.speed} </Text>
            //         <View style={{flex: 0.8}}/>
            //         <Text style={{fontSize:30}}>{this.state.direction}</Text>
            //     </View>
            //     <View style={{flex: .05, flexDirection:'row', justifyContent: 'space-around'}}>
            //         <Text style={{fontSize:15}}>{this.state.speed}</Text>
            //         <Text style={{fontSize:15}}>{this.state.engineRunTime}</Text>
            //         <Text style={{fontSize:15}}>{this.state.rpm}</Text>
            //     </View>
            //     <View style={{flex: .6, borderWidth:1}}>
            //         <ScrollView>
            //             {
            //                 cmdData.map((item, index) => (
            //                     <View
            //                         style={{flexDirection:'row', alignItems: 'center'}}
            //                         key={index}
            //                     >
            //                         <Text style={{flex: .6, textAlign:'right'}}>{item.cmdName}</Text>
            //                         <Text style={{flex: .4}}>: {item.cmdResult}</Text>
            //                     </View>
            //                 ))
            //             }
            //         </ScrollView>
            //     </View>
            //     <View style={{flex: .1, flexDirection:'row', justifyContent: 'space-around'}}>
            //         <View>
            //             <Text style={{fontSize:18}}>GPS</Text>
            //             <Text style={{fontSize:15, textAlign: 'center'}}>{this.state.gpsState}</Text>
            //         </View>
            //         <View>
            //             <Text style={{fontSize:18}}>Bluetooth</Text>
            //             <Text style={{fontSize:15, textAlign: 'center'}}>{this.state.btStatus}</Text>
            //         </View>
            //         <View>
            //             <Text style={{fontSize:18}}>OBD</Text>
            //             <Text style={{fontSize:15, textAlign: 'center'}}>{this.state.obdStatus}</Text>
            //         </View>
            //     </View>
            //
            //     <View>
            //         {
            //             this.state.btDeviceListForUI.map((item, index) => (
            //
            //                 <TouchableOpacity  key={index} onPress={()=>this.setState({selectedBTDeviceIndex:index,btSelectedDeviceAddress:item.address})}>
            //                     <View
            //                         style={{flexDirection:'row', alignItems: 'center'}}
            //                         key={index}
            //                     >
            //                         <Text style={{fontSize:15,  textAlign: 'center'}} >{item.name}:{item.address}</Text>
            //                     </View>
            //                 </TouchableOpacity>
            //             ))
            //         }
            //     </View>
            //
            //     <View style={{flex: .1, flexDirection:'row', justifyContent: 'space-around'}}>
            //         <TouchableOpacity style={styles.btn} onPress={()=>this.runMenu(1)}>
            //             <Text style={{fontSize:15,color:'white', textAlign: 'center'}}>Start</Text>
            //         </TouchableOpacity>
            //         <TouchableOpacity style={styles.btn} onPress={()=>this.runMenu(2)}>
            //             <Text style={{fontSize:15,color:'white', textAlign: 'center'}}>Stop</Text>
            //         </TouchableOpacity>
            //
            //         <TouchableOpacity style={styles.btn} onPress={()=>this.setState({isMockUpMode:!this.state.isMockUpMode})}>
            //             <Text style={{fontSize:15,color:'white', textAlign: 'center'}}>{this.state.isMockUpMode?'Test Mode':'Live Mode'}</Text>
            //         </TouchableOpacity>
            //
            //     </View>
            //     <Text style={{fontSize:15,  textAlign: 'center'}}>{this.state.btSelectedDeviceAddress}</Text>
            //
            // </View>
        );
    }
}

const styles = StyleSheet.create({
    bodyContainer: {
        padding: 5,
        flex: .9
    },
    btn:{
        backgroundColor:'blue',padding:10, height:40, width:100},
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
    },
    welcome: {
        fontSize: 20,
        textAlign: 'center',
        margin: 10,
    },
    instructions: {
        textAlign: 'center',
        color: '#333333',
        marginBottom: 5,
    },
    titleHeader:{
        height: "24%",
        justifyContent: "flex-start"
    },
    cardContainer:{
        marginTop:"2%",
        padding:30,
    },
    deviceListView:{
        flexDirection:"row",
        width:'100%',
        height:100
    },
    button:{
        width: "12%",
        backgroundColor:Theme.secondary_color_3,
        marginLeft:10
    },
    btnView:{
        width:400,
        flexDirection: "row",
        justifyContent:'space-between'
    }

});
